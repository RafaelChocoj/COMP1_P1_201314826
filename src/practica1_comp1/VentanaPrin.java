/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica1_comp1;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import java.io.*;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 *
 * @author RAFAEL
 */
public class VentanaPrin extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrin
     */
    ////////////guarda listado de arboles generados
    LinkedList<ListadoArboles> lis_arbol_expre;
            
    /*conjuntos*/
    LinkedList<Variables> lis_var;
     /*lista expresiones regulares*/
    LinkedList<VarExpReg> lis_ex_reg;
    /*para evaluar las expresiones regulares*/
    LinkedList<Exp_a_Evaluar> lis_evaluar_expre;
    
    File rutas_ar;
    
    JFileChooser dialog = new JFileChooser();
    FileInputStream entrada;
    FileOutputStream salida;
    File archivo;
    public VentanaPrin() {
        initComponents();
        
        lis_arbol_expre = new LinkedList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrolpan = new javax.swing.JScrollPane();
        jtxtarea1 = new javax.swing.JTextArea();
        n_analizar = new javax.swing.JButton();
        b_prob_ar = new javax.swing.JButton();
        b_crear_arbol = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        pan2 = new javax.swing.JScrollPane();
        area2 = new javax.swing.JTextArea();
        b_lex = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        m_abrir = new javax.swing.JMenuItem();
        m_save = new javax.swing.JMenuItem();
        m_saveas = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtxtarea1.setColumns(20);
        jtxtarea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jtxtarea1.setRows(5);
        scrolpan.setViewportView(jtxtarea1);

        n_analizar.setText("Analizar Entrada");
        n_analizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                n_analizarActionPerformed(evt);
            }
        });

        b_prob_ar.setText("Probando armando");
        b_prob_ar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_prob_arActionPerformed(evt);
            }
        });

        b_crear_arbol.setText("Crear Graficas");
        b_crear_arbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_crear_arbolActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        area2.setColumns(20);
        area2.setRows(5);
        pan2.setViewportView(area2);

        b_lex.setText("Evaluar Lexemas");
        b_lex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_lexActionPerformed(evt);
            }
        });

        jMenu2.setText("Archivo");

        m_abrir.setText("Abrir");
        m_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_abrirActionPerformed(evt);
            }
        });
        jMenu2.add(m_abrir);

        m_save.setText("Guardar");
        m_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_saveActionPerformed(evt);
            }
        });
        jMenu2.add(m_save);

        m_saveas.setText("Guardar como...");
        m_saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_saveasActionPerformed(evt);
            }
        });
        jMenu2.add(m_saveas);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrolpan, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pan2, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(b_lex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(n_analizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(b_crear_arbol, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(822, 822, 822)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(b_prob_ar)))))
                .addContainerGap(423, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(scrolpan, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(pan2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(n_analizar)
                    .addComponent(b_crear_arbol))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(b_prob_ar)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b_lex)))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void m_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_abrirActionPerformed
        if(dialog.showDialog(null, "Abrir docuemnto")== JFileChooser.APPROVE_OPTION)
        {
            boolean ya = false;
            archivo = dialog.getSelectedFile();
            if(archivo.canRead() )
            {
////                JOptionPane.showMessageDialog(null, "archivo: " + archivo);
                 /*verificando si ya tiene abierto el arhicvo*/
                 
//                 for (int i = 0; i < rutas_ar.size(); i++) {
//                    JOptionPane.showMessageDialog(null,  "rutas_ar **: " + rutas_ar );
//                    if (archivo.equals(rutas_ar.get(i).getArhivo()) )
                    if (archivo.equals(rutas_ar))
                    {
                        JOptionPane.showMessageDialog(null,  "El documento " + archivo.getName() + " ya esta abierto" );
                        ya = true;
                    }
//                }
                 /*fin*/
                 
                if(ya == false){
                 
                if(archivo.getName().endsWith("er") )
                {
                    //JOptionPane.showMessageDialog(null,  archivo.getName() );
                    String contenido = AbrirArhivo(archivo);
                    jtxtarea1.setText(contenido);
                    rutas_ar = archivo;
                    this.setTitle(archivo.getName());
//                    InsertaPesta(contenido, archivo.getName());
                    
                    //errores.add(new Error(token.getLexema(), "Error Sintáctico", "Se esperaba el simbolo '[' y se encontró "
                    //            + token.getLexema(), token.getFila(), token.getColumna()));
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Extencion incorrecta");
                } 
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "No puede abrir archivo");
            }           
        }
    }//GEN-LAST:event_m_abrirActionPerformed

    private void m_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_saveActionPerformed

        if (rutas_ar == null)
        {
            JOptionPane.showMessageDialog(null, "Hoy hay ningun archivo");
        }
            else
        {
////            JOptionPane.showMessageDialog(null, rutas_ar);
        
//        if(dialog.showDialog(null, "Guardar Arhivo") == JFileChooser.APPROVE_OPTION )
//        {
            String ruta;
            //archivo = dialog.getSelectedFile();
            archivo = rutas_ar;
            
            ruta = archivo.toString();
            //ruta = ruta + ".dat";
            archivo = new File(ruta);
//            JOptionPane.showMessageDialog(null, archivo);
            
            GuardarAhora(archivo);     
        }
    }//GEN-LAST:event_m_saveActionPerformed

    private void m_saveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_saveasActionPerformed
//        if (indice_actual < 0 )
//        {
//            JOptionPane.showMessageDialog(null, "Hoy hay ningun archivo");
//        }
//            else
//        {
           
        if(dialog.showDialog(null, "Guardar Arhivo") == JFileChooser.APPROVE_OPTION )
        {
            String ruta;
            archivo = dialog.getSelectedFile();
            ruta = archivo.toString();
            ruta = ruta + ".er";
            archivo = new File(ruta);
            //JOptionPane.showMessageDialog(null, archivo);
            
            GuardarAhora(archivo);
            
            rutas_ar = archivo;
            this.setTitle(archivo.getName());
        }
//        }
    }//GEN-LAST:event_m_saveasActionPerformed

    public void imprimir_errLex(){
        area2.setText("");
        for (int i = 0; i < err_lex.size(); ++i)
        { 
            area2.setText(area2.getText() +err_lex.get(i) + "\n");
        }
        
        for (int i = 0; i < err_sin.size(); ++i)
        { 
            area2.setText(area2.getText() +err_sin.get(i) + "\n");
        }
    }
    LinkedList<String> err_lex;
    LinkedList<String> err_sin;
    private void n_analizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_n_analizarActionPerformed
       String texto = jtxtarea1.getText();
       //JOptionPane.showMessageDialog(null, texto);
       
       Lexico analisis_lex =  new Lexico();
       analisis_lex.Analizador_cadena(texto);
       
       analisis_lex.ImprimeTokens();
       /////System.err.println("------------------------" );
       err_lex = analisis_lex.getErr_lex();
       
               
       Sintactico sin = new Sintactico();
       sin.Parsear(analisis_lex.lis_tokens);
       
       lis_ex_reg = sin.getLista_ExpRegulares();
       lis_var = sin.getLista_Conjuntos();
       lis_evaluar_expre = sin.getLista_Evaluar();
       
//       for (int i = 0; i < lis_evaluar_expre.size(); ++i)
//        { 
//            JOptionPane.showMessageDialog(null,lis_evaluar_expre.get(i).identificador + " - "  + lis_evaluar_expre.get(i).cadena_eva);
//        }
 
       
        err_sin = sin.getList_sin();
        imprimir_errLex();
        
        JOptionPane.showMessageDialog(null,"termino el analisis");
//       sin.Imprime_var();
//       
//       sin.Imprime_ER();
       
    }//GEN-LAST:event_n_analizarActionPerformed

    NodeArbol root;
    private void b_prob_arActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_prob_arActionPerformed
        // TODO add your handling code here:
        LinkedList<ER_unitario> pref_er = new LinkedList<>();
        
//        pref_er.add("3");
//        pref_er.add("4");
//        pref_er.add("+");
//        pref_er.add("2");
//        pref_er.add("*");
//        pref_er.add("4");
//        pref_er.add("-");

//        pref_er.add("-");
//        pref_er.add("*");
//        pref_er.add("/");
//        pref_er.add("15");
//        pref_er.add("-");
//        pref_er.add("7");
//        pref_er.add("+");
//        pref_er.add("1");
//        pref_er.add("1");
//        pref_er.add("3");
//        pref_er.add("+");
//        pref_er.add("2");
//        pref_er.add("+");
//        pref_er.add("1");
//        pref_er.add("1");


//        ///para expresion1
//        pref_er.add(".");
//        pref_er.add("|");
//        pref_er.add("Los ");
//        pref_er.add("El ");
//        pref_er.add(".");
//        pref_er.add("+");
//        pref_er.add("|");
//        pref_er.add("vocales");
//        pref_er.add("otrasLetras");
//        pref_er.add("*");
//        pref_er.add("|");
//        pref_er.add("abecedario");
//        pref_er.add("_");
        
//        ///para Expresion2 
//        pref_er.add(".");
//        pref_er.add("+");
//        pref_er.add("abecedario");
//        pref_er.add(".");
//        pref_er.add("conjnum");
//        pref_er.add("?");
//        pref_er.add(".");
//        pref_er.add(":");
//        pref_er.add("+");
//        pref_er.add("abecedario");

//        ///para Expresion3  
//        pref_er.add(".");
//        pref_er.add(".");
//        pref_er.add(".");
//        pref_er.add(".");
//        pref_er.add(".");
//        pref_er.add(".");
//        pref_er.add("*");
//        pref_er.add("|");
//        pref_er.add("abecedario");
//        pref_er.add("_");
//        pref_er.add("+");
//        pref_er.add("conjnum");
//        pref_er.add(">");
//        pref_er.add("+");
//        pref_er.add("conjnum");
//        pref_er.add("es ");
//        pref_er.add("|");
//        pref_er.add("TRUE");
//        pref_er.add("FALSE");
//        pref_er.add("punto");

/////para operaciones   
//        pref_er.add(new ER_unitario(".", "O"));
//        pref_er.add(new ER_unitario("+", "O"));
//        pref_er.add(new ER_unitario("digito", "CO"));
//        pref_er.add(new ER_unitario("+", "O"));
//        pref_er.add(new ER_unitario(".", "O"));
//        pref_er.add(new ER_unitario("|", "O"));
//        pref_er.add(new ER_unitario("+", "CA")); /// mas
//        pref_er.add(new ER_unitario("|", "O"));
//        pref_er.add(new ER_unitario("-", "CA"));
//        pref_er.add(new ER_unitario("|", "O"));
//        pref_er.add(new ER_unitario("*", "CA")); ///asterisco
//        pref_er.add(new ER_unitario("/", "CA"));
//        pref_er.add(new ER_unitario("+", "O"));
////        pref_er.add(new ER_unitario("digito", "CO"));
        
   
//////para ejemplo de prac
//pref_er.add(new ER_unitario(".", "O"));
//pref_er.add(new ER_unitario("letra", "CO"));
//pref_er.add(new ER_unitario("*", "O"));
//pref_er.add(new ER_unitario("|", "O"));
//pref_er.add(new ER_unitario("_", "CA"));
//pref_er.add(new ER_unitario("|", "O"));
//pref_er.add(new ER_unitario("letra", "CO"));
//pref_er.add(new ER_unitario("digito", "CO"));

///para pradtica de los procedimientos
pref_er.add(new ER_unitario(".", "O"));
pref_er.add(new ER_unitario(".", "O"));
pref_er.add(new ER_unitario("a", "CA"));

pref_er.add(new ER_unitario("*", "O"));
//pref_er.add(new ER_unitario("+", "O"));

pref_er.add(new ER_unitario("|", "O"));
pref_er.add(new ER_unitario("a", "CA"));
pref_er.add(new ER_unitario("b", "CA"));
pref_er.add(new ER_unitario("b", "CA"));




        
//        pref_er.add(".");
//        pref_er.add("3");
//        pref_er.add("5");
        
//        //pref_er.add("/");
//        pref_er.add(".");
//        pref_er.add(".");
//        pref_er.add("5");
//        pref_er.add("3");
//        pref_er.add("6");


//        pref_er.add(".");
//        pref_er.add("letra");
//        pref_er.add("*");
//        pref_er.add("|");
//        pref_er.add("-");
//        pref_er.add("|");
//        pref_er.add("letra");
//        pref_er.add("digito");

        
        Armando_RPN arbol =  new Armando_RPN(pref_er);
        //NodeArbol root;
        root = arbol.leyendo_expresiones();
        /////JOptionPane.showMessageDialog(null,"res arbol: " + root);
        
        Arbol tree = new Arbol(root, "ejemplo");
        
        tree.preOrder();
        
        tree.posOrder();
        tree.Graficando_arbol();
        JOptionPane.showMessageDialog(null,"recor _pos ");
        
        tree.posOrder_sig();
        tree.graficando_siguientes();
        
        
        //this.Graficando_arbol();
        
        
        //JOptionPane.showMessageDialog(null,"res arbol: " + arbol.leyendo_expresiones());
        
    }//GEN-LAST:event_b_prob_arActionPerformed

    private void b_crear_arbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_crear_arbolActionPerformed

        //Crea_Three_ER();
        if (err_lex.size() == 0 && err_sin.size() == 0) {
            Crea_Three_ER();
        } else{
            JOptionPane.showMessageDialog(null,"Corriga errores para graficar");
        }
    }//GEN-LAST:event_b_crear_arbolActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        LinkedList<Integer> lis1 = new LinkedList<>();
        lis1.add(1);
        lis1.add(2);
        lis1.add(3);
        
        LinkedList<Integer> lis2 = new LinkedList<>();
        lis2.add(0);
        lis2.add(1);
        
        lis2.add(5);
        lis2.add(2);
        
        
        Collections.sort(lis1);
        Collections.sort(lis2);
        
        JOptionPane.showMessageDialog(null,"lis1: " +lis1);
        JOptionPane.showMessageDialog(null,"lis2: " +lis2);
        
        for (int i = 0; i < lis2.size(); i++) {
            
            if (exite(lis1,lis2.get(i)) == false){
                lis1.add(lis2.get(i));
            }
            
        }
        Collections.sort(lis1);
        JOptionPane.showMessageDialog(null,"new lis1: " +lis1);
//        LinkedList<Integer> junto = new LinkedList<>();
//        List newList = Stream.concat(lis1.stream(), lis2.stream()) .collect(Collectors.toList());
//        JOptionPane.showMessageDialog(null,"strem: " +newList );
       
       
//        if (lis1.equals(lis2)) {
//            JOptionPane.showMessageDialog(null," las listas son iguales");
//        } else {
//            JOptionPane.showMessageDialog(null," No iguales");
//        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public int ObtenerIndiceArbol(String exp){
        
        for (int i = 0; i < lis_arbol_expre.size(); ++i)
        {             
              if (lis_arbol_expre.get(i).name_expresion.equals(exp)) {
                return i;
            }
        }
        return -99;
    }
    
    LinkedList<String> resul_lis;
    
     public void lis_resul(){
        area2.setText("");
        for (int i = 0; i < resul_lis.size(); ++i)
        { 
            area2.setText(area2.getText() + resul_lis.get(i) + "\n");
        }
        
    }
     
    private void b_lexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_lexActionPerformed
        // TODO add your handling code here:
        
        //lis_evaluar_expre.get(0).cadena_eva, lis_var);
        for (int i = 0; i < lis_evaluar_expre.size(); ++i)
        {
            //JOptionPane.showMessageDialog(null,"--- " + lis_var.get(i).name_var);
            JOptionPane.showMessageDialog(null, "Evaliando: " + lis_evaluar_expre.get(i).identificador /*+ " - "
                    +lis_evaluar_expre.get(i).cadena_eva*/);
            int exist = ObtenerIndiceArbol(lis_evaluar_expre.get(i).identificador);   
            
            if (exist == -99) {
                area2.setText("No existe expresion Regular para "  + lis_evaluar_expre.get(i).identificador);
            } else
            {
                Arbol tree;
                tree = lis_arbol_expre.get(exist).arbol;
   
                tree.EvaluandoLexema_final(lis_evaluar_expre.get(i).cadena_eva, lis_var);
                resul_lis = tree.getResul_ex();
                lis_resul();
            }

        }
    }//GEN-LAST:event_b_lexActionPerformed

    public boolean exite(LinkedList<Integer> lis1, int v2){
        for (int i = 0; i < lis1.size(); i++) {
            if (lis1.get(i)== v2){
                return true;
            }
        }
        return false;
    }
    
    public void lis_ar(){
        area2.setText("");
        for (int i = 0; i < lis_arbol_expre.size(); ++i)
        { 
            area2.setText(area2.getText() + lis_arbol_expre.get(i).name_expresion + "\n");
        }
        
    }
    public void Crea_Three_ER(){
        /*probando armando el arbol*/
        LinkedList<ListadoArboles> lis_arnew = new LinkedList<>();
        lis_arbol_expre = lis_arnew;
        for (int i = 0; i < lis_ex_reg.size(); ++i)
        { 
            JOptionPane.showMessageDialog(null,  lis_ex_reg.get(i).name_exreg /*+ " - "
                    +lis_ex_reg.get(i).prefijo*/);
            ///
            LinkedList<ER_unitario> pref_er = new LinkedList<>();
            pref_er = lis_ex_reg.get(i).prefijo;
            
            
            /////creando arbol
            Armando_RPN arbol =  new Armando_RPN(pref_er);
            NodeArbol root_exp;
            root_exp = arbol.leyendo_expresiones();
            
            /////JOptionPane.showMessageDialog(null,"res arbol: " + root);

            
            ///////////////////inicioa graficas
            //Arbol tree = new Arbol(root_exp);
            Arbol tree = new Arbol(root_exp, lis_ex_reg.get(i).name_exreg);

            tree.preOrder();
            
            tree.posOrder();
            tree.Graficando_arbol();
            //JOptionPane.showMessageDialog(null,"recor _pos ");

            tree.posOrder_sig();
            tree.graficando_siguientes();
            
            ////transiciones
            //tree.TabTransiciones();
            tree.Create_TabTransiciones();
            tree.graficando_Automata();
            
            ListadoArboles ar = new ListadoArboles(lis_ex_reg.get(i).name_exreg, tree);
            lis_arbol_expre.add(ar);
//            
//////////           tree.EvaluandoLexema_final(lis_evaluar_expre.get(0).cadena_eva, lis_var);
//            
//            ////////////////fin graficas
        
        }
        lis_ar();
        JOptionPane.showMessageDialog(null, "Termino de graficar");
        
    }
    
    public void Buscando_Expre_a_evaluar(){
        
    }
    
    //////////////////////////////////////inicio graficando arbol
    public boolean Graficando_arbol(){

        StringBuilder graf  = new StringBuilder();
        //graf.append("arbol_avl.txt", "w");
        graf.append("digraph G { \n");
        graf.append("rankdir=TB;\n");
        graf.append("graph [nodesep=0.5 ];\n");
        graf.append("node [shape = record, fillcolor=seashell2];\n");
        this.VerArbol(graf);
        graf.append("\n}\n");
        
        return this.graf_arbolavl(graf.toString());
  
    }
    
    public void VerArbol(StringBuilder graf){ 
        this.VerArbol(root, graf);
        //this.VerArbol(this.root, graf);
    }
    
    public void VerArbol(NodeArbol root_ac, StringBuilder graf){ 
        if (root_ac != null){
            this.VerArbol(root_ac.left, graf);
            NodeArbol tempo = root_ac;
            if (tempo.right != null){               
                //graf.append("\"nodo"+ root_ac.lexema+"\"");
                //graf.append(":C1 -> \"nodo"+ tempo.right.lexema + "\"\n");
                
                graf.append("\"nodo"+ root_ac.lexema + root_ac.id + "\"");
                graf.append(":C1 -> \"nodo"+ tempo.right.lexema + tempo.right.id + "\"\n");
            }             
            if (tempo.left != null){
                //graf.append("\"nodo"+ root_ac.lexema+"\"");
                //graf.append(":C0 -> \"nodo"+ tempo.left.lexema + "\"\n");
                
                graf.append("\"nodo"+ root_ac.lexema+root_ac.id +"\"");
                graf.append(":C0 -> \"nodo"+ tempo.left.lexema +tempo.left.id + "\"\n");
            }
            //graf.append("\"nodo"+ root_ac.lexema  +"\" [ label =\"<C0>|");
            graf.append("\"nodo"+ root_ac.lexema +root_ac.id +"\" [ label =\"<C0>|");
            
//            if (root_ac.lexema.equals("|")){
//                graf.append(" "+ "l" /*+ "\\n"*/);
//            } else {
                graf.append( "\\"+root_ac.lexema /*+ "\\n"*/);
//            }
            
            //graf.append("Altura: "+ root_ac.height+ "\\n");
            
            //graf.append("FE: "+ root_ac.fe+ "\\n" );
            
            //graf.append("Timestamp: "+ formato_fecha.format(root_ac.fecha_creacion) + "\\n" );
            //graf.append("Propietario: "+ root_ac.user+ "\\n" );
            //String conte = root_ac.contenido.replace("\"", "\\\"");
            //conte = conte.replace("{", "\\{");
            //conte = conte.replace("}", "\\}");
            
            //if (conte.length() >= 50 ) {
            //    conte = conte.substring(0,48) + "...";
            //}
            //graf.append("Contenido: " + conte );
            
            graf.append("|<C1>\"]; \n");

            this.VerArbol(root_ac.right, graf);
        }
    }
    
    
    public boolean graf_arbolavl(String grafica){
        //File archivo =new File("hash_user.txt");
        try
            {
            File archivo =new File("arbol_avl.txt");
            FileWriter escribir= new FileWriter(archivo);
            escribir.write(grafica);
            escribir.close();
            }

            catch(Exception e)
            {
            JOptionPane.showMessageDialog(null, "Error al escribir","NANI",JOptionPane.ERROR_MESSAGE);
            return false;
            }
        
        try {

            Runtime rt = Runtime.getRuntime();
            //rt.exec( cmd );
            Process p = rt.exec("dot -Tpng arbol_avl.txt -o arbol_avl.jpg");
            p.waitFor();
            //rt.exec("hash_user.jpg");
            
            Desktop.getDesktop().open(new File("arbol_avl.jpg"));

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex,"NANI",JOptionPane.ERROR_MESSAGE);
                return false;
            } finally {}
        
        return true;
        
    }
    
    //////////////////////////////////fin graficando arbol
    
    public void GuardarAhora(File archivo_g)
    {
        //if (archivo_g.getName().endsWith("dat"))
          //  {
                String doc = jtxtarea1.getText();
                //JOptionPane.showMessageDialog(null, doc);      
                
                boolean pasa = GuardarArchivo(archivo_g, doc);
                
                if (pasa == false)                
                {
                    JOptionPane.showMessageDialog(null, "error al guardar achivo");
                }
                JOptionPane.showMessageDialog(null, "archivo guardado");
            //}
        
    }
    
    public boolean GuardarArchivo(File arhivo, String documento)
    {
        boolean pasa = true;
        try {
            salida = new FileOutputStream(arhivo);
            byte[] bytxt = documento.getBytes();
            salida.write(bytxt);
            //arhivo_actual = arhivo;
            
        } catch (Exception e) {
            pasa = false;
        }
         return pasa;   
    }
    
    public String AbrirArhivo(File archivo)
    {
        String document = "";
        try {
//            entrada = new FileInputStream(archivo);
//            int ascci;
//            while ((ascci= entrada.read()) != -1 ) { 
//                char letr = (char)ascci;
//                document = document + letr;
//                   
//            }

            String cadena;
            FileReader f = new FileReader(archivo);
            BufferedReader b = new BufferedReader(f);
            while((cadena = b.readLine())!=null) {
                //System.out.println(cadena);
                document = document + cadena + '\n';
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
        return document;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area2;
    private javax.swing.JButton b_crear_arbol;
    private javax.swing.JButton b_lex;
    private javax.swing.JButton b_prob_ar;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTextArea jtxtarea1;
    private javax.swing.JMenuItem m_abrir;
    private javax.swing.JMenuItem m_save;
    private javax.swing.JMenuItem m_saveas;
    private javax.swing.JButton n_analizar;
    private javax.swing.JScrollPane pan2;
    private javax.swing.JScrollPane scrolpan;
    // End of variables declaration//GEN-END:variables
}
